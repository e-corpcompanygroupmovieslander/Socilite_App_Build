apply plugin: 'com.android.application'
import org.gradle.api.GradleException
task updatePackageName {
doLast {
def configXmlFile = file('src/main/res/values/config.xml')
def packageName
if (configXmlFile.exists()) {
def configXml = new XmlSlurper().parse(configXmlFile)
packageName = configXml.string.find { it.@name == 'package_name' }?.text()
} else {
throw new GradleException("config.xml not found at: ${configXmlFile.absolutePath}")
}
fileTree(dir: 'src/main/java', include: '**/*.java').each { file ->
file.text = file.text.replaceAll('package\\s+[^;]+;', 'package ' + packageName + ';')
}}
}
android {
def compileSdkVersionValue = readSdkVersion('compile_sdk.xml')
compileSdkVersion compileSdkVersionValue
def configXmlFile = file('src/main/res/values/config.xml')
def packageName
if (configXmlFile.exists()) {
def configXml = new XmlSlurper().parse(configXmlFile)
packageName = configXml.string.find { it.@name == 'package_name' }?.text()
} else {
throw new GradleException("config.xml not found at: ${configXmlFile.absolutePath}")
}
defaultConfig {
applicationId packageName
minSdkVersion readSdkVersion('min_sdk.xml')
targetSdkVersion readSdkVersion('target_sdk.xml')
namespace packageName
def versionXml = new XmlSlurper().parse(file('src/main/res/values/version.xml'))
versionCode versionXml.integer.find { it.@name == 'version_code' }.text().toInteger()
versionName versionXml.string.find { it.@name == 'version_name' }.text()
buildConfigField "String", "PACKAGE_NAME", "\"$packageName\""
}
buildTypes {
release {
minifyEnabled false
proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
}}
def keystoreXml = new XmlSlurper().parse(file('src/main/res/values/keystore.xml'))
signingConfigs {
release {
storeFile file(keystoreXml.string.find { it.@name == 'keystore_path' }.text())
storePassword keystoreXml.string.find { it.@name == 'keystore_password' }.text()
keyAlias keystoreXml.string.find { it.@name == 'key_alias' }.text()
keyPassword keystoreXml.string.find { it.@name == 'key_password' }.text()
}}
buildTypes.release.signingConfig = signingConfigs.release
}
dependencies {
implementation 'androidx.appcompat:appcompat:1.4.0'
implementation 'com.google.android.material:material:1.5.0'
implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
implementation 'com.github.bumptech.glide:glide:4.12.0'
testImplementation 'junit:junit:4.13.2'
androidTestImplementation 'androidx.test.ext:junit:1.1.3'
androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
}
preBuild.dependsOn updatePackageName
def readSdkVersion(String fileName) 
{
def sdkXmlFile = file("src/main/res/values/${fileName}")
if (sdkXmlFile.exists()) {
def sdkXml = new XmlSlurper().parse(sdkXmlFile)
return sdkXml.integer.text().toInteger()
} else {
throw new GradleException("${fileName} not found at: ${sdkXmlFile.absolutePath}")}
}